import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import quad

# 定義函數 f(x)
def f(x):
    return x**2 * np.sin(x)


m = 16
N = 4


xj = np.linspace(0, 1, m, endpoint=False)
fj = f(xj)

a0 = np.sum(fj) / m
ak = []
bk = []

# 計算 ak, bk
for k in range(1, N+1):
    cos_term = np.cos(2 * np.pi * k * xj)
    sin_term = np.sin(2 * np.pi * k * xj)
    ak.append((2/m) * np.sum(fj * cos_term))
    bk.append((2/m) * np.sum(fj * sin_term))


def S4(x):
    result = a0
    for k in range(1, N+1):
        result += ak[k-1] * np.cos(2 * np.pi * k * x)
        result += bk[k-1] * np.sin(2 * np.pi * k * x)
    return result


integral_S4, _ = quad(S4, 0, 1)


true_integral, _ = quad(f, 0, 1)


S4_vals = S4(xj)
error = np.sum((fj - S4_vals)**2)


print(f"(a) Coefficients:")
print(f" a0 = {a0:.6f}")
for i in range(N):
    print(f" a{i+1} = {ak[i]:.6f}, b{i+1} = {bk[i]:.6f}")
print(f"\n(b) ∫ S4(x) dx ≈ {integral_S4:.6f}")
print(f"(c) ∫ x^2 sin(x) dx = {true_integral:.6f}")
print(f"(d) Error E(S4) = {error:.6f}")
